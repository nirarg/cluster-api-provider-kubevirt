// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v11 "kubevirt.io/client-go/api/v1"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateVirtualMachine mocks base method
func (m *MockClient) CreateVirtualMachine(ctx context.Context, namespace string, newVM *v11.VirtualMachine) (*v11.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", ctx, namespace, newVM)
	ret0, _ := ret[0].(*v11.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine
func (mr *MockClientMockRecorder) CreateVirtualMachine(ctx, namespace, newVM interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockClient)(nil).CreateVirtualMachine), ctx, namespace, newVM)
}

// DeleteVirtualMachine mocks base method
func (m *MockClient) DeleteVirtualMachine(ctx context.Context, namespace, name string, options *v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", ctx, namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine
func (mr *MockClientMockRecorder) DeleteVirtualMachine(ctx, namespace, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockClient)(nil).DeleteVirtualMachine), ctx, namespace, name, options)
}

// GetVirtualMachine mocks base method
func (m *MockClient) GetVirtualMachine(ctx context.Context, namespace, name string, options *v10.GetOptions) (*v11.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", ctx, namespace, name, options)
	ret0, _ := ret[0].(*v11.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine
func (mr *MockClientMockRecorder) GetVirtualMachine(ctx, namespace, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockClient)(nil).GetVirtualMachine), ctx, namespace, name, options)
}

// GetVirtualMachineInstance mocks base method
func (m *MockClient) GetVirtualMachineInstance(ctx context.Context, namespace, name string, options *v10.GetOptions) (*v11.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineInstance", ctx, namespace, name, options)
	ret0, _ := ret[0].(*v11.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineInstance indicates an expected call of GetVirtualMachineInstance
func (mr *MockClientMockRecorder) GetVirtualMachineInstance(ctx, namespace, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineInstance", reflect.TypeOf((*MockClient)(nil).GetVirtualMachineInstance), ctx, namespace, name, options)
}

// ListVirtualMachine mocks base method
func (m *MockClient) ListVirtualMachine(ctx context.Context, namespace string, options v10.ListOptions) (*v11.VirtualMachineList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachine", ctx, namespace, options)
	ret0, _ := ret[0].(*v11.VirtualMachineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachine indicates an expected call of ListVirtualMachine
func (mr *MockClientMockRecorder) ListVirtualMachine(ctx, namespace, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachine", reflect.TypeOf((*MockClient)(nil).ListVirtualMachine), ctx, namespace, options)
}

// UpdateVirtualMachine mocks base method
func (m *MockClient) UpdateVirtualMachine(ctx context.Context, namespace string, vm *v11.VirtualMachine) (*v11.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualMachine", ctx, namespace, vm)
	ret0, _ := ret[0].(*v11.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualMachine indicates an expected call of UpdateVirtualMachine
func (mr *MockClientMockRecorder) UpdateVirtualMachine(ctx, namespace, vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachine", reflect.TypeOf((*MockClient)(nil).UpdateVirtualMachine), ctx, namespace, vm)
}

// CreateSecret mocks base method
func (m *MockClient) CreateSecret(ctx context.Context, namespace string, newSecret *v1.Secret) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, namespace, newSecret)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockClientMockRecorder) CreateSecret(ctx, namespace, newSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockClient)(nil).CreateSecret), ctx, namespace, newSecret)
}
