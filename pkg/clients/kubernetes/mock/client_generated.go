// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/openshift/machine-api-operator/pkg/apis/machine/v1beta1"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// PatchMachine mocks base method
func (m *MockClient) PatchMachine(machine, originMachineCopy *v1beta1.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchMachine", machine, originMachineCopy)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMachine indicates an expected call of PatchMachine
func (mr *MockClientMockRecorder) PatchMachine(machine, originMachineCopy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMachine", reflect.TypeOf((*MockClient)(nil).PatchMachine), machine, originMachineCopy)
}

// StatusPatchMachine mocks base method
func (m *MockClient) StatusPatchMachine(machine, originMachineCopy *v1beta1.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusPatchMachine", machine, originMachineCopy)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusPatchMachine indicates an expected call of StatusPatchMachine
func (mr *MockClientMockRecorder) StatusPatchMachine(machine, originMachineCopy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusPatchMachine", reflect.TypeOf((*MockClient)(nil).StatusPatchMachine), machine, originMachineCopy)
}

// UserDataSecret mocks base method
func (m *MockClient) UserDataSecret(secretName, namespace string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDataSecret", secretName, namespace)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDataSecret indicates an expected call of UserDataSecret
func (mr *MockClientMockRecorder) UserDataSecret(secretName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDataSecret", reflect.TypeOf((*MockClient)(nil).UserDataSecret), secretName, namespace)
}
